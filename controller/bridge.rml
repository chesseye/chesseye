open Types
open Util


let bridge s text =
  try
    while true do
      let line = input_line stdin in
      begin match parse_message line with
      | MASK m -> Rml_async.safe_emit s m
      | OBST -> print_endline "OBST"
      | NOCB -> print_endline "NOCB"
      | TEXT msg ->
          Rml_async.safe_emit text msg
      | OTHER msg -> print_endline msg
      end
    done
  with
  | End_of_file -> ()


let process bridge_async s text =
  run Rml_async.proc_of_fun (bridge s) text


let rec process bridge_sync s text =
  let line_opt =
    try Some (input_line stdin) with _ -> None
  in
  begin match line_opt with
  | Some line ->
      begin match parse_message line with
      | MASK m -> Rml_async.safe_emit s m
      | OBST -> print_endline "OBST"
      | NOCB -> print_endline "NOCB"
      | TEXT msg -> Rml_async.safe_emit text msg
      | OTHER msg -> print_endline msg
      end;
      pause;
      run bridge_sync s text
  | None -> ()
  end

